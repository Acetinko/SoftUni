# ===============================
# = DATA SOURCE PROPERTIES
# ===============================

# Set here configurations for the database connection

# Driver settings
#spring.datasource.driverClassName = com.mysql.jdbc.Driver
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Connection url for the database "system_bookshop"
spring.datasource.url = jdbc:mysql://localhost:3308/ruk_db?useSSL=false&createDatabaseIfNotExist=true

# Username and password
spring.datasource.username = root
spring.datasource.password = ?

# Spring boot initializer read src/main/resources/data.sql
spring.datasource.initialization-mode = embedded
spring.datasource.separator=$$

# Continue on error
spring.datasource.continue-on-error = true

###Logging Levels
# Disable the default loggers
logging.level.org = WARN
logging.level.blog = WARN

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

#Show SQL executed with parameter bindings
logging.level.org.hibernate.SQL = DEBUG
logging.level.org.hibernate.type.descriptor = TRACE

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = create

# Naming strategy


# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

spring.jpa.properties.hibernate.format_sql = TRUE